import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.objectweb.asm.ClassReader
import org.objectweb.asm.tree.ClassNode

import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
}


version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.isxander.dev/snapshots" } //For minecraft snapshots
}

loom {
    accessWidenerPath = file("src/main/resources/skymatrix.accesswidener")
    mixin {
        useLegacyMixinAp = false
    }
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

kotlin {
    jvmToolchain(21)
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

//设置工具链

compileKotlin {
    compilerOptions {
        suppressWarnings = true
        jvmTarget = JvmTarget.JVM_21
    }
}
dependencies {

    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.8+kotlin.1.9.0")
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'

    implementation files("libs/baritone-api-1.10.1.jar")
    implementation 'com.alibaba:fastjson:2.0.28'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '5.0.0-alpha.11'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation("net.fabricmc:fabric-language-kotlin:1.11.0+kotlin.2.0.0")
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
    // REI
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
    // EMI
    modCompileOnly "dev.emi:emi-fabric:${project.emi_version}:api"

    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.21+kotlin.1.9.22")
}

base {
    archivesName = project.archives_base_name
}


processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
    from {
        configurations.compileClasspath.findAll {
            it.name.contains("fastjson") ||
                    it.name.contains("jackson") ||
                    it.name.contains("kotlin-stdlib") ||
                    it.name.contains("okio") ||
                    it.name.contains("okhttp")||
                    it.name.contains("baritone-api")
        }.collect {
            zipTree(it)
        }
    }
    manifest.attributes(
            "tweakClass": "cn.seiua.skymatrix.client.MyTweaker",
            "TweakOrder": 0,
    )
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = "utf-8"
}
tasks.withType(Javadoc).configureEach {
    options.encoding = "utf-8"
}
tasks.register("split", SplitTask)
build {
    finalizedBy("split")
}
sourceSets {
    main {
        main.kotlin.srcDirs += 'src/main/kotlin'
        main.java.srcDirs += 'src/main/java'
    }
}
kotlin {
    jvmToolchain(21)
}
// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

abstract class SplitTask extends DefaultTask {
    @TaskAction
    void split() {
        this.prepare()
        this.split1()
    }

    void split1() {
        def input = new File("${project.rootDir}/build/libs/${project.archives_base_name}-${project.mod_version}.jar")
        def sin = new File("${project.rootDir}/build/libs/${project.archives_base_name}-${project.mod_version}-sin.jar")
        def split = new File("${project.rootDir}/build/libs/${project.archives_base_name}-${project.mod_version}-split.jar")
        // 分离带有Lcn/seiua/skymatrix/client/component/Pro;注解的类到新的jar文件 output
        // Unsupported class file major version 29556
        def jar = new JarFile(input)
        def sinOutputStream = new JarOutputStream(new FileOutputStream(sin))
        def splitOutputStream = new JarOutputStream(new FileOutputStream(split))
        jar.entries().each { entry ->
            def inputStream = jar.getInputStream(entry)
            def sinoutputStream1 = sinOutputStream
            def splitoutputStream1 = splitOutputStream
            def flag = true;
            if (list.contains(entry.name)) {
                sinoutputStream1.putNextEntry(new JarEntry(entry.name))
                sinoutputStream1 << inputStream.bytes
                sinoutputStream1.closeEntry()
            } else {
                splitoutputStream1.putNextEntry(new JarEntry(entry.name))
                splitoutputStream1 << inputStream.bytes
                splitoutputStream1.closeEntry()
            }
        }
        sinOutputStream.close()
        splitOutputStream.close()
        jar.close();
    }
    public List list = []

    void prepare() {
        def input = new File("${project.rootDir}/build/libs/${project.archives_base_name}-${project.mod_version}.jar")
        // 分离带有Lcn/seiua/skymatrix/client/component/Pro;注解的类到新的jar文件 output
        // Unsupported class file major version 29556
        def jar = new JarFile(input)
        jar.entries().each { entry ->
            def inputStream = jar.getInputStream(entry)
            if (entry.name.endsWith(".class") && entry.name.startsWith("cn/seiua/skymatrix")) {
                def classReader = new ClassReader(inputStream)
                def classNode = new ClassNode()
                classReader.accept(classNode, 0)
                def annotationNode = classNode.visibleAnnotations?.find { it.desc == "Lcn/seiua/skymatrix/client/component/Pro;" }
                if (annotationNode == null) {
                    list.add(entry.name)
                }
            } else {
                list.add(entry.name)
            }
        }
        jar.close();
    }

}